package com.algorithm.array;

/**
 * xiaog
 */
class SolutionMaxArea {
//    public int maxArea(int[] height) {
//        int result = 0;
//
//        for (int i = 0; i < height.length; i++) {
//            for (int j = i + 1; j < height.length; j++) {
//                int x = j - i;
//                int y = height[i] > height[j] ? height[j] : height[i];
//                int area = x * y;
//                result = result > area ? result : area;
//            }
//        }
//
//        return result;
//    }

    public int maxArea(int[] height) {
        int l = 0, r = height.length - 1;
        int ans = 0;
        while (l < r) {
            int area = Math.min(height[l], height[r]) * (r - l);
            ans = Math.max(ans, area);
            if (height[l] <= height[r]) {
                ++l;
            }
            else {
                --r;
            }
        }
        return ans;
    }
}


public class MaxArea {
    public static void main(String[] args) {
        //int[] input = {1, 8, 6, 2, 5, 4, 8, 3, 7};
        //int[] input = {4,3,2,1,4};
        //int[] input = {1, 2, 1};
        int[] input = {8361, 5302, 8672, 2400, 5150, 3527, 9216, 6713, 2902, 310, 555, 9176, 311, 9968, 5705, 3983, 7992, 8553, 6953, 9541, 5828, 1750, 6731, 3552, 5274, 7303, 3724, 5387, 9504, 1900, 937, 1146, 7266, 7943, 7911, 9055, 8046, 7180, 6516, 7810, 686, 5210, 1956, 4540, 7540, 2083, 1579, 4260, 2450, 2527, 6524, 5723, 6766, 777, 5694, 6018, 2880, 3653, 6011, 8172, 5943, 2862, 6594, 2902, 9887, 5878, 3065, 8197, 9195, 4560, 3428, 2209, 475, 852, 9488, 3368, 4319, 6230, 1975, 5829, 9474, 4490, 2067, 6048, 9136, 5344, 6022, 1787, 5553, 140, 5130, 524, 3450, 4008, 721, 6154, 5598, 8219, 4614, 3404, 8232, 9023, 4552, 7711, 6057, 5324, 8578, 3595, 4663, 4, 3703, 1429, 7921, 3085, 3694, 1461, 8932, 2632, 7046, 801, 6043, 617, 7565, 3469, 1627, 1464, 3050, 7982, 6702, 5467, 8604, 5515, 9155, 3260, 5040, 313, 8885, 929, 4103, 7947, 1139, 702, 1047, 2889, 1439, 3945, 4738, 2462, 8491, 7699, 376, 4639, 1329, 3644, 7408, 3665, 7417, 1388, 861, 7510, 7908, 4568, 2618, 4565, 7222, 2003, 1586, 9494, 1744, 7997, 7389, 9476, 2752, 701, 5925, 4963, 6859, 1634, 7170, 1336, 1514, 6757, 698, 5123, 4390, 7910, 7527, 9520, 156, 6402, 1428, 789, 3411, 106, 3206, 8216, 700, 994, 337, 9329, 5310, 7897, 1462, 5709, 872, 1482, 3137, 1197, 6459, 822, 1715, 6575, 2697, 8903, 4315, 2139, 2295, 7797, 1060, 3511, 1564, 6625, 3579, 6412, 4178};
        System.out.println(new SolutionMaxArea().maxArea(input));
    }
}
